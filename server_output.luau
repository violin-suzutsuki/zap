--!native
--!optimize 2
--!nocheck
--!nolint
--#selene: allow(unused_variable, shadowing, incorrect_standard_library_use)
-- Server generated by Zap v0.6.6 (https://github.com/red-blox/zap)
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")

local outgoing_buff: buffer
local outgoing_used: number
local outgoing_size: number
local outgoing_inst: { Instance }
local outgoing_apos: number

local incoming_buff: buffer
local incoming_read: number
local incoming_inst: { Instance }
local incoming_ipos: number

-- thanks to https://dom.rojo.space/binary.html#cframe
local CFrameSpecialCases = {
	CFrame.Angles(0, 0, 0),
	CFrame.Angles(math.rad(90), 0, 0),
	CFrame.Angles(0, math.rad(180), math.rad(180)),
	CFrame.Angles(math.rad(-90), 0, 0),
	CFrame.Angles(0, math.rad(180), math.rad(90)),
	CFrame.Angles(0, math.rad(90), math.rad(90)),
	CFrame.Angles(0, 0, math.rad(90)),
	CFrame.Angles(0, math.rad(-90), math.rad(90)),
	CFrame.Angles(math.rad(-90), math.rad(-90), 0),
	CFrame.Angles(0, math.rad(-90), 0),
	CFrame.Angles(math.rad(90), math.rad(-90), 0),
	CFrame.Angles(0, math.rad(90), math.rad(180)),
	CFrame.Angles(0, math.rad(-90), math.rad(180)),
	CFrame.Angles(0, math.rad(180), math.rad(0)),
	CFrame.Angles(math.rad(-90), math.rad(-180), math.rad(0)),
	CFrame.Angles(0, math.rad(0), math.rad(180)),
	CFrame.Angles(math.rad(90), math.rad(180), math.rad(0)),
	CFrame.Angles(0, math.rad(0), math.rad(-90)),
	CFrame.Angles(0, math.rad(-90), math.rad(-90)),
	CFrame.Angles(0, math.rad(-180), math.rad(-90)),
	CFrame.Angles(0, math.rad(90), math.rad(-90)),
	CFrame.Angles(math.rad(90), math.rad(90), 0),
	CFrame.Angles(0, math.rad(90), 0),
	CFrame.Angles(math.rad(-90), math.rad(90), 0),
}

local function alloc(len: number)
	if outgoing_used + len > outgoing_size then
		while outgoing_used + len > outgoing_size do
			outgoing_size = outgoing_size * 2
		end

		local new_buff = buffer.create(outgoing_size)
		buffer.copy(new_buff, 0, outgoing_buff, 0, outgoing_used)

		outgoing_buff = new_buff
	end

	outgoing_apos = outgoing_used
	outgoing_used = outgoing_used + len

	return outgoing_apos
end

local function read(len: number)
	local pos = incoming_read
	incoming_read = incoming_read + len

	return pos
end

local function save()
	return {
		buff = outgoing_buff,
		used = outgoing_used,
		size = outgoing_size,
		inst = outgoing_inst,
	}
end

local function load(data: {
	buff: buffer,
	used: number,
	size: number,
	inst: { Instance },
})
	outgoing_buff = data.buff
	outgoing_used = data.used
	outgoing_size = data.size
	outgoing_inst = data.inst
end

local function load_empty()
	outgoing_buff = buffer.create(64)
	outgoing_used = 0
	outgoing_size = 64
	outgoing_inst = {}
end

load_empty()

local types = {}
if not RunService:IsRunning() then
	local noop = function() end
	return table.freeze({
		AnotherEvent = table.freeze({
			SetCallback = noop
		}),
		Test = table.freeze({
			SetCallback = noop
		}),
	}) :: Events
end
local Players = game:GetService("Players")

if RunService:IsClient() then
	error("Cannot use the server module on the client!")
end
local reliable = ReplicatedStorage:FindFirstChild("ZAP_RELIABLE")
if reliable == nil then
	reliable = Instance.new("RemoteEvent")
	reliable.Name = "ZAP_RELIABLE"
	reliable.Parent = ReplicatedStorage
end

local unreliable = ReplicatedStorage:FindFirstChild("ZAP_UNRELIABLE")
if unreliable == nil then
	unreliable = Instance.new("UnreliableRemoteEvent")
	unreliable.Name = "ZAP_UNRELIABLE"
	unreliable.Parent = ReplicatedStorage
end
local player_map = {}

local function load_player(player: Player)
	if player_map[player] then
		load(player_map[player])
	else
		load_empty()
	end
end

Players.PlayerRemoving:Connect(function(player)
	player_map[player] = nil
end)
export type Character = ((Player)?)
function types.write_Character(value: Character)
	if value == nil then
		alloc(1)
		buffer.writeu8(outgoing_buff, outgoing_apos, 0)
	else
		alloc(1)
		buffer.writeu8(outgoing_buff, outgoing_apos, 1)
		assert(value:IsA("Player"))
		table.insert(outgoing_inst, value)
	end
end
function types.read_Character()
	local value;
	if buffer.readu8(incoming_buff, read(1)) == 1 then
		incoming_ipos = incoming_ipos + 1
		value = incoming_inst[incoming_ipos]
		assert(value == nil or value:IsA("Player"))
	else
		value = nil
	end
	return value
end

RunService.Heartbeat:Connect(function()
	for player, outgoing in player_map do
		if outgoing.used > 0 then
			local buff = buffer.create(outgoing.used)
			buffer.copy(buff, 0, outgoing.buff, 0, outgoing.used)

			reliable:FireClient(player, buff, outgoing.inst)

			outgoing.buff = buffer.create(64)
			outgoing.used = 0
			outgoing.size = 64
			table.clear(outgoing.inst)
		end
	end
end)

local events = table.create(2)
reliable_handlers = {
	[1] = function(player, buff, inst)
		local value
		value = {}
		value.float = types.read_Character()
		if buffer.readu8(incoming_buff, read(1)) == 1 then
			incoming_ipos = incoming_ipos + 1
			value.any = incoming_inst[incoming_ipos]
		else
			value.any = nil
		end
		if events[1] then
			task.spawn(events[1], player, value)
		end
	end,
	[2] = function(player, buff, inst)
		local call_id = buffer.readu8(buff, read(1))
		local value
		value = {}
		value.foo = buffer.readu8(incoming_buff, read(1))
		local len = buffer.readu16(incoming_buff, read(2))
		value.bar = buffer.readstring(incoming_buff, read(len), len)
		if events[2] then
			task.spawn(function(player, call_id, value)
				local rets = events[2](player, value)
				load_player(player)
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 2)
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, call_id)
				if rets == "Success" then
					alloc(1)
					buffer.writeu8(outgoing_buff, outgoing_apos, 0)
				elseif rets == "Fail" then
					alloc(1)
					buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				else
					error("Invalid enumerator")
				end
				player_map[player] = save()
			end, player, call_id, value)
		end
	end,
}
reliable.OnServerEvent:Connect(function(player, buff, inst)
	incoming_buff = buff
	incoming_inst = inst
	incoming_read = 0
	incoming_ipos = 0
	local len = buffer.len(buff)
	while incoming_read < len do
		local id = buffer.readu8(buff, read(1))
		if reliable_handlers[id] then
			reliable_handlers[id](player, buff, inst)
		else
			error("Unknown event id")
		end
	end
end)
local returns = table.freeze({
	AnotherEvent = table.freeze({
		SetCallback = function(Callback: (Player, ({
			float: (Character),
			any: ((unknown)),
		})) -> ()): () -> ()
			events[1] = Callback
			return function()
				events[1] = nil
			end
		end,
	}),
	Test = table.freeze({
		SetCallback = function(Callback: (Player, ({
			foo: (number),
			bar: (string),
		})) -> (("Success" | "Fail"))): () -> ()
			events[2] = Callback
			return function()
				events[2] = nil
			end
		end,
	}),
})
type Events = typeof(returns)
return returns
